# Multi-threaded Minesweeper


screen capture of program running can be seen at (youtube address coming soon...)
game controls are:
  esc to exit game
  space bar to restart game
  mouse clicks that follow with traditional Minesweeper
  

The Window.h, Window.cpp, main.cpp, stdafx.cpp, and stdafx.cpp files are very similar to the same-named files in the 3DPong game. The Window files have a few more variables to manage the various states and two more call back functions for input using the mouse.

The MouseClickReader.h file contains a singleton class used to calculate, log, and return screen pixel coordinates to vulkan coordinates to eventually translate mouse clicks to determine which tile had been clicked.

TileGeometry.h contains the various vertex and index information used to create the tessellated tiles used to send to the Vulkan Render Engine.

The TileManager.h and TileManager.cpp files contain all the code that defines the game logic and how the geometric data translates from one moment to the next within gameplay. There are two lambda functions and one callable object that are used to implement the threaded functions. The callable function is defined at the end of the TileManager.h file and the lambdas are defined locally. They are found in the TileManager::setupMines and the TileManager::revealMines functions in the TileManager.cpp file. Each thread manages the calculations of the gameboard row by row, which do not overlap, and are therefore thread safe.
