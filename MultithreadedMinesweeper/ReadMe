# Multi-threaded Minesweeper

Multi-threaded code locations: 
(Note that TileManager is not a singleton. It is the class for the gameboard object.)

In the TileManager.h file starting on line 67 is the callable object to assign mines to tiles and is implemented in the TileManager.cpp file starting on line 72 and will done by line 90.

In the TileManager.cpp file starting on line 100 is the lambda defining to label tiles with the number of adjacent mine tiles and is implemented thereafter. This method defines a lambda and runs that lambda on multiple threads immediately after. This multi-threaded algorithm will be done by line 212. The length in code is from the switch statment, which is not a complicated switch, just long-ish.

In the TileManager.cpp file starting on line 660 is the private method used to reveal all mines when a player has clicked on a mine. This method defines a lambda and runs the lambda on multiple threads immediately after. This multi-threaded algorithm will be done by line 690.



screen capture of program running can be seen at https://www.youtube.com/watch?v=M7LyPDitTq8
game controls are:
  esc to exit game
  space bar to restart game
  mouse clicks that follow with traditional Minesweeper
  

The Window.h, Window.cpp, main.cpp, stdafx.cpp, and stdafx.cpp files are very similar to the same-named files in the 3DPong game. The Window files have a few more variables to manage the various states and two more call back functions for input using the mouse.

The MouseClickReader.h file contains a singleton class used to calculate, log, and return screen pixel coordinates to vulkan coordinates to eventually translate mouse clicks to determine which tile had been clicked.

TileGeometry.h contains the various vertex and index information used to create the tessellated tiles used to send to the Vulkan Render Engine.

The TileManager.h and TileManager.cpp files contain all the code that defines the game logic and how the geometric data translates from one moment to the next within gameplay. There are two lambda functions and one callable object that are used to implement the threaded functions. The callable function is defined at the end of the TileManager.h file and the lambdas are defined locally. They are found in the TileManager::setupMines and the TileManager::revealMines functions in the TileManager.cpp file. Each thread manages the calculations of the gameboard row by row, which do not overlap, and are therefore thread safe.

Note that: While I did call certain classes "Manager" classes, they are not singleton classes. The only singleton class in this project is the MouseClickReader object that is defined globally as #define MouseClickReader::instance() PICKER. I needed this to be declared statically so that it could log mouse click coordinates in the callback functions in the Window class. Although it could be easily defined as a static class and not necessarily a singleton.
